测试eclipse项目和本地git仓库项目是否同步
成功
origin是远程仓库的默认·名字，也可以改变默认名字 git remote add 远程仓库名（默认名字origin） 远程仓库地址   连接远程仓库
git add 文件夹或文件名  从工作区提交代码到缓存区
git commit -m "注释" 从缓存区提交代码到分支
git push 本地仓库上传代码到gitHub仓库
git pull 从gitHub仓库下拉代码到本地仓库，下拉后在和本地的合并并解决冲突，在push上去
add commit pull push 这样的顺序提交代码    
git checkout --orphan 分支名 创建本地仓库分支
git checkout 分支名  切换到该分支
git push origin 分支名 远程仓库中也就创建了一个对应分支或者提交代码到该分支
git branch -D 分支名  删除本地仓库分支
git push origin --delete 分支名   删除远程仓库的分支
git log   查看提交历史和版本号
git reset --hard 版本号   切换项目到那个版本  前提是本地仓库没有提交到远程仓库，否则不可以改变远程仓库
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
git rm 文件名  从工作区删除文件
git remote add origin 远程仓库地址   连接远程仓库
git push -u origin master  第一次推送master分支的所有内容；
git push origin 分支名  上交代码到远程仓库的指定分支


从远程仓库克隆为本地仓库  
（1）在需要克隆的位置运行git bash 命令
（2）输入git clone 远程仓库地址   即可在需要的位置看到该仓库
（3）然后就可以操作该仓库，修改和提交到远程仓库

新建一个分支完成特殊的任务
git checkout -b 分支名
在该分支上完成任务然后commit该任务
该分支的任务完成后，回到原来的分支，把两个分支合并
git merge 分支名 
然后把不需要的分支删掉（此分支只为这次任务而开，任务完成后，就没要在了）

master主分支最好用来发布新版本，而做任务最好在其他分支dev完成，然后在合并到主分支上，在发布版本，修复bug时若原来的分支dev
没有做完，则先保存工作现场，在切换到其他分支bug修bug，修复完在回到原来没做完的分支dev，回复工作现场
git stash   保存现在分支还未提交的工作现场
git stash pop 恢复工作现场（在指定的分支恢复）
git cherry-pick 提交的id  复制指定的提交到当前分支，使当前分支也解决的bug


因此，多人协作的工作模式通常是这样：
    首先，可以试图用git push origin <branch-name>推送自己的修改；
    如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
    如果合并有冲突，则解决冲突，并在本地提交；
    没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
这就是多人协作的工作模式，一旦熟悉了，就非常简单


    查看远程库信息，使用git remote -v；
    本地新建的分支如果不推送到远程，对其他人就是不可见的；
    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
    
    命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
    命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
    命令git tag可以查看所有标签。
    
    

   命令git push origin <tagname>可以推送一个本地标签；
   命令git push origin --tags可以推送全部未推送过的本地标签；
   命令git tag -d <tagname>可以删除一个本地标签；
  命令git push origin :refs/tags/<tagname>可以删除一个远程标签

  别人clone仓库只能clone主分支master的，不能clone其他dev分支，只能在自己本地仓库新建这个分支再和远程的dev分支进行关联
  为了避免冲突，每次push时，先pull下来
  git 的ssh码在电脑配置一次就可以了，可以用命令行配置，也可以用图形界面工具
  一个本地或者远程仓库对应一个项目  （不要在一个仓库管理多个项目）